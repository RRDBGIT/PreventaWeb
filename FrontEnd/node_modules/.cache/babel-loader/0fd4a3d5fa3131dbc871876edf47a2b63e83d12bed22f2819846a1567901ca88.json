{"ast":null,"code":"exports.crearCliente = async (req, res) => {\n  const {\n    razon_social,\n    direccion,\n    telefono,\n    id_localidad,\n    cuit,\n    saldo,\n    latitud,\n    longitud\n  } = req.body;\n  try {\n    // ✅ Construir listas de columnas y valores dinámicamente\n    const columnas = ['RazonSocial', 'Direccion', 'Telefono', 'IdLocalidad', 'CUIT', 'Saldo'];\n    const valores = [razon_social, direccion, telefono || null, id_localidad || null, cuit, saldo || 0];\n    let sql;\n    let params;\n    if (latitud != null && longitud != null) {\n      // ✅ Incluir geolocalización\n      sql = `\n                INSERT INTO Clientes (RazonSocial, Direccion, Telefono, IdLocalidad, CUIT, Saldo, geolocalizacion)\n                VALUES (?, ?, ?, ?, ?, ?, POINT(?, ?))\n            `;\n      params = [...valores, parseFloat(longitud), parseFloat(latitud)];\n    } else {\n      // ✅ Sin geolocalización\n      sql = `\n                INSERT INTO Clientes (RazonSocial, Direccion, Telefono, IdLocalidad, CUIT, Saldo)\n                VALUES (?, ?, ?, ?, ?, ?)\n            `;\n      params = valores;\n    }\n    const [result] = await db.execute(sql, params);\n    const [nuevoCliente] = await db.execute(`\n            SELECT \n                c.IdCliente AS id_cliente,\n                c.NumeroCliente AS numero_cliente,\n                c.RazonSocial AS razon_social,\n                c.Direccion AS direccion,\n                c.Telefono AS telefono,\n                c.CUIT AS cuit,\n                c.Saldo AS saldo,\n                l.Nombre AS localidad_nombre,\n                ST_X(c.geolocalizacion) AS longitud,\n                ST_Y(c.geolocalizacion) AS latitud\n            FROM Clientes c\n            INNER JOIN Localidades l ON c.IdLocalidad = l.IdLocalidad\n            WHERE c.IdCliente = ?\n        `, [result.insertId]);\n    console.log(\"✅ Cliente creado:\", nuevoCliente[0]);\n    res.status(201).json(nuevoCliente[0]);\n  } catch (error) {\n    console.error(\"❌ ERROR en crearCliente:\", error.message);\n    res.status(500).json({\n      error: \"Error al crear cliente\"\n    });\n  }\n};","map":{"version":3,"names":["exports","crearCliente","req","res","razon_social","direccion","telefono","id_localidad","cuit","saldo","latitud","longitud","body","columnas","valores","sql","params","parseFloat","result","db","execute","nuevoCliente","insertId","console","log","status","json","error","message"],"sources":["C:/PreventaWeb/FrontEnd/src/components/ClienteSelector.jsx"],"sourcesContent":["exports.crearCliente = async (req, res) => {\r\n    const { \r\n        razon_social, \r\n        direccion, \r\n        telefono, \r\n        id_localidad, \r\n        cuit, \r\n        saldo,\r\n        latitud,\r\n        longitud\r\n    } = req.body;\r\n\r\n    try {\r\n        // ✅ Construir listas de columnas y valores dinámicamente\r\n        const columnas = ['RazonSocial', 'Direccion', 'Telefono', 'IdLocalidad', 'CUIT', 'Saldo'];\r\n        const valores = [razon_social, direccion, telefono || null, id_localidad || null, cuit, saldo || 0];\r\n\r\n        let sql;\r\n        let params;\r\n\r\n        if (latitud != null && longitud != null) {\r\n            // ✅ Incluir geolocalización\r\n            sql = `\r\n                INSERT INTO Clientes (RazonSocial, Direccion, Telefono, IdLocalidad, CUIT, Saldo, geolocalizacion)\r\n                VALUES (?, ?, ?, ?, ?, ?, POINT(?, ?))\r\n            `;\r\n            params = [...valores, parseFloat(longitud), parseFloat(latitud)];\r\n        } else {\r\n            // ✅ Sin geolocalización\r\n            sql = `\r\n                INSERT INTO Clientes (RazonSocial, Direccion, Telefono, IdLocalidad, CUIT, Saldo)\r\n                VALUES (?, ?, ?, ?, ?, ?)\r\n            `;\r\n            params = valores;\r\n        }\r\n\r\n        const [result] = await db.execute(sql, params);\r\n\r\n        const [nuevoCliente] = await db.execute(`\r\n            SELECT \r\n                c.IdCliente AS id_cliente,\r\n                c.NumeroCliente AS numero_cliente,\r\n                c.RazonSocial AS razon_social,\r\n                c.Direccion AS direccion,\r\n                c.Telefono AS telefono,\r\n                c.CUIT AS cuit,\r\n                c.Saldo AS saldo,\r\n                l.Nombre AS localidad_nombre,\r\n                ST_X(c.geolocalizacion) AS longitud,\r\n                ST_Y(c.geolocalizacion) AS latitud\r\n            FROM Clientes c\r\n            INNER JOIN Localidades l ON c.IdLocalidad = l.IdLocalidad\r\n            WHERE c.IdCliente = ?\r\n        `, [result.insertId]);\r\n\r\n        console.log(\"✅ Cliente creado:\", nuevoCliente[0]);\r\n        res.status(201).json(nuevoCliente[0]);\r\n    } catch (error) {\r\n        console.error(\"❌ ERROR en crearCliente:\", error.message);\r\n        res.status(500).json({ error: \"Error al crear cliente\" });\r\n    }\r\n};"],"mappings":"AAAAA,OAAO,CAACC,YAAY,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvC,MAAM;IACFC,YAAY;IACZC,SAAS;IACTC,QAAQ;IACRC,YAAY;IACZC,IAAI;IACJC,KAAK;IACLC,OAAO;IACPC;EACJ,CAAC,GAAGT,GAAG,CAACU,IAAI;EAEZ,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC;IACzF,MAAMC,OAAO,GAAG,CAACV,YAAY,EAAEC,SAAS,EAAEC,QAAQ,IAAI,IAAI,EAAEC,YAAY,IAAI,IAAI,EAAEC,IAAI,EAAEC,KAAK,IAAI,CAAC,CAAC;IAEnG,IAAIM,GAAG;IACP,IAAIC,MAAM;IAEV,IAAIN,OAAO,IAAI,IAAI,IAAIC,QAAQ,IAAI,IAAI,EAAE;MACrC;MACAI,GAAG,GAAG;AAClB;AACA;AACA,aAAa;MACDC,MAAM,GAAG,CAAC,GAAGF,OAAO,EAAEG,UAAU,CAACN,QAAQ,CAAC,EAAEM,UAAU,CAACP,OAAO,CAAC,CAAC;IACpE,CAAC,MAAM;MACH;MACAK,GAAG,GAAG;AAClB;AACA;AACA,aAAa;MACDC,MAAM,GAAGF,OAAO;IACpB;IAEA,MAAM,CAACI,MAAM,CAAC,GAAG,MAAMC,EAAE,CAACC,OAAO,CAACL,GAAG,EAAEC,MAAM,CAAC;IAE9C,MAAM,CAACK,YAAY,CAAC,GAAG,MAAMF,EAAE,CAACC,OAAO,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE,CAACF,MAAM,CAACI,QAAQ,CAAC,CAAC;IAErBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,YAAY,CAAC,CAAC,CAAC,CAAC;IACjDlB,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACL,YAAY,CAAC,CAAC,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACC,OAAO,CAAC;IACxDzB,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC7D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}